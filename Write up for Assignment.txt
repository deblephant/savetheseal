SAVE THE SEAL WRITE UP

I designed a game adapted from an old school game ‘Dodger’, where players have to use their cursor to dodge items on the screen. My version of the game was a seal trying to dodge basketballs. I tried to use as much as I have learnt from all the tutorials and lecture sessions and incorporate the code into my game.

I started out with the Assignment 4 code template and edited it from there.

Firstly, I came up with a circus theme and came up with a back story for the main character sally the seal. I found a seal gif and the necessary backdrop for a circus setting. I adapted the template from the NoTimerAnimation HTML for this.

Then, I went to create the basketballs in an array based on the Assignment 4 code and styled them with a basketball GIF. From the Phone Sensors tutorial, I adapted the Emitter js code(nextToEmit function and Draw function) to make the basketballs fall randomly and continuously. I used mouse events to control the movement of the seal and the distance function used in Assignment 4 to determine when the game ends(when a basketball collides with the seal).

From the Assignment 3 code, I applied the use of difficulty levels by changing the speed in which the basketballs drop per level. I did this through adjusting the gravity variable. By doing this, I had to change the interval in which the nextToEmit(from the Emitter code) function was called in order that the balls would fall more consistently for each level. I also adapted the use of a start button from the code and added a ‘How to play’ button where I used animation to show the instructions. I learnt how to use the Raphaeljs function of a path to make a star from a jsfiddle.com page to style the buttons. I also added a ‘try again’ button to reload the game and refresh the loop generating the basketballs. I found the refresh page code from a forum on www.stackoverflow.com. I did this through the use of a reset( ) function. 

Next, I added audio to the game based on what was learnt in the AnimatedSoundTutorial. There is audio played before the game starts, when the game starts and a short track when the player loses. They play, pause and loop at the necessary times.

Following which, I added a scoreboard by using a counter and printed the score onto a div I created in the index.html. The score gets updated as time passes and it restarts each time the game reloads in the reset( ) function. The difficulty level that the player selects also gets reflected on the ‘scoreboard’.

Lastly, I uploaded it onto github for launch under the website deblephant.github.io/savetheseal
